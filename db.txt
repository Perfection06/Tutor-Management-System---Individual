CREATE TABLE free_time_schedule (
    id INT AUTO_INCREMENT PRIMARY KEY,
    day VARCHAR(20) NOT NULL
);

CREATE TABLE free_time_slots (
    id INT AUTO_INCREMENT PRIMARY KEY,
    schedule_id INT NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    FOREIGN KEY (schedule_id) REFERENCES free_time_schedule(id) ON DELETE CASCADE
);



CREATE TABLE grades (
    id INT PRIMARY KEY AUTO_INCREMENT,
    grade_name VARCHAR(50) NOT NULL
);

CREATE TABLE subjects (
    id INT PRIMARY KEY AUTO_INCREMENT,
    subject_name VARCHAR(100) NOT NULL
);

CREATE TABLE courses (
    id INT AUTO_INCREMENT PRIMARY KEY,
    course_name VARCHAR(255) NOT NULL,
    course_details TEXT,
    price_range VARCHAR(50),
    duration VARCHAR(50),
    start_date DATE,
    end_date DATE,
    start_time TIME,
    end_time TIME
);


-- Create table to store classes
CREATE TABLE classes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    grade INT,
    subject INT,
    title VARCHAR(255) NOT NULL,
    fee DECIMAL(10, 2),
    FOREIGN KEY (grade) REFERENCES grades(id),
    FOREIGN KEY (subject) REFERENCES subjects(id)
);

-- Create table to store class days, start and end times
CREATE TABLE class_days_times (
    id INT PRIMARY KEY AUTO_INCREMENT,
    class_id INT,
    day VARCHAR(20) NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    FOREIGN KEY (class_id) REFERENCES classes(id) ON DELETE CASCADE
);

Student...............................

-- Create Student table
CREATE TABLE Student (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    username VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    program ENUM('course', 'class') NOT NULL
);

-- Create Student_details table
CREATE TABLE Student_details (
    id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT NOT NULL,
    age INT NOT NULL,
    dob DATE NOT NULL,
    nic VARCHAR(20),
    gender ENUM('Male', 'Female', 'Other') NOT NULL,
    contact VARCHAR(15) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    mom_name VARCHAR(100) NOT NULL,
    dad_name VARCHAR(100) NOT NULL,
    parent_contact VARCHAR(15) NOT NULL,
    parent_email VARCHAR(100),
    street VARCHAR(255) NOT NULL,
    city VARCHAR(100) NOT NULL,
    state VARCHAR(100) NOT NULL,
    postal_code VARCHAR(10) NOT NULL,
    type ENUM('course', 'class') NOT NULL,
    profile_image VARCHAR(255) DEFAULT NULL
    FOREIGN KEY (student_id) REFERENCES Student(id) ON DELETE CASCADE
);

-- Student-Courses Relationship Table
CREATE TABLE student_courses (
    id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT NOT NULL,
    course_id INT NOT NULL,
    FOREIGN KEY (student_id) REFERENCES Student(id) ON DELETE CASCADE,
    FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE,
    UNIQUE KEY unique_student_course (student_id, course_id)
);

-- Student-Classes Relationship Table
CREATE TABLE student_classes (
    id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT NOT NULL,
    class_id INT NOT NULL,
    FOREIGN KEY (student_id) REFERENCES Student(id) ON DELETE CASCADE,
    FOREIGN KEY (class_id) REFERENCES classes(id) ON DELETE CASCADE,
    UNIQUE KEY unique_student_class (student_id, class_id)
);


CREATE TABLE class_attendance (
    id INT AUTO_INCREMENT PRIMARY KEY,         
    class_id INT NOT NULL,                     
    student_id INT NOT NULL,                   
    date DATE NOT NULL,                        
    status ENUM('present', 'absent', 'late') NOT NULL, 
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, 
    FOREIGN KEY (class_id) REFERENCES classes(id) ON DELETE CASCADE, 
    FOREIGN KEY (student_id) REFERENCES students(id) ON DELETE CASCADE, 
    UNIQUE KEY unique_class_student_date (class_id, student_id, date) 
);

CREATE TABLE course_attendance (
    id INT AUTO_INCREMENT PRIMARY KEY,         
    course_id INT NOT NULL,                    
    student_id INT NOT NULL,                   
    date DATE NOT NULL,                       
    status ENUM('present', 'absent', 'late') NOT NULL, 
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, 
    FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE, 
    FOREIGN KEY (student_id) REFERENCES Student(id) ON DELETE CASCADE, 
    UNIQUE KEY unique_course_student_date (course_id, student_id, date) 
);

CREATE TABLE class_materials (
    id INT AUTO_INCREMENT PRIMARY KEY,
    class_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    file_path VARCHAR(255) NOT NULL,
    end_date DATE NOT NULL,
    FOREIGN KEY (class_id) REFERENCES classes(id) -- Assuming you have a 'classes' table where the 'id' is the primary key
);


CREATE TABLE course_materials (
    id INT AUTO_INCREMENT PRIMARY KEY,
    course_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    file_path VARCHAR(255) NOT NULL,
    upload_date DATETIME DEFAULT CURRENT_TIMESTAMP,
    end_date DATE NOT NULL,
    FOREIGN KEY (course_id) REFERENCES courses(id) ON DELETE CASCADE
);

CREATE TABLE individual_messages (
    id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT NOT NULL,
    admin_id INT NOT NULL,
    student_type ENUM('course', 'class') NOT NULL,
    message TEXT NOT NULL,
    attachment VARCHAR(255) DEFAULT NULL,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (student_id) REFERENCES Student(id) ON DELETE CASCADE,
    FOREIGN KEY (admin_id) REFERENCES Admin(admin_id) ON DELETE CASCADE
);

CREATE TABLE `broadcast_message` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `admin_id` INT NOT NULL,
    `message_type` ENUM('course', 'class') NOT NULL,
    `target_id` INT NOT NULL, 
    `message` TEXT NOT NULL,
    `attachment` VARCHAR(255) DEFAULT NULL,
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (`admin_id`) REFERENCES Admin(admin_id) ON DELETE CASCADE
);

CREATE TABLE Admin (
    admin_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL
);

CREATE TABLE Message (
    id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(255) NOT NULL,
    program ENUM('course', 'class') NOT NULL,
    message TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
